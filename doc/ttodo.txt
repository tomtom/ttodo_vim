*ttodo.txt*         Edit, view, sort, and filter todo.txt files
                    Author: Tom Link, micathom at gmail com

This plugin provides the |:Ttodo| command that allow easy editing,
viewing, and filtering of todo.txt files (see http://todotxt.com) via
|tlib#input#List()|. The plugin supports:

    - syntax highlighting for todo.txt files
    - search across multiple todo.txt files (see |:Ttodo|)
    - filter tasks with specific tags, lists etc. (see |:Ttodo|)
    - subtasks (outlines of complex tasks)
    - hide tasks until a threshold date
    - recurring tasks.

Examples: >

    " Show all tasks; default map (|g:ttodo_nmap|): <Leader>1
    :Ttodo

    " Show important tasks; default map (|g:ttodo_nmap_important|): <Leader>!
    :Ttodo!

    " Show tasks that are due in the next two weeks
    :Ttodo --due=2w

    " Show tasks with priorities A to C
    :Ttodo --pri=A-C

    " Show tasks matching @Test
    :Ttodo @Test

    " By default, |:Ttodo| scans the todo.txt files in |g:ttodo#dirs|. Users 
    " can also scan loaded buffers.
    " Show tasks in the current buffer
    :Ttodo --bufname=%

    " Command-line options can be collected in preference sets (see 
    " |g:ttodo#prefs|)
    :Ttodo --pref=work

Global maps:

    <Leader>1 ............ Show tasks (:Ttodo)
    <Leader>! ............ Show important tasks (:Ttodo --pref=important)

If filetype is ttodo, the following buffer-local keymaps are enabled:

    <cr> ................. Add a new task;
                           if |g:ttodo#ftplugin#add_at_eof| is true, add the 
                           task at the end of file
    <c-cr> ............... Add a new task; copy any list, tags, and notes from 
                           the current task;
                           if |g:ttodo#ftplugin#add_at_eof| is true, add the 
                           task at the end of file
    <s-cr> ............... Add a new subtask
    <LocalLeader>tx ...... Mark the current task as "done"
    <LocalLeader>td ...... Mark the current task as due in N days
    <LocalLeader>tw ...... Mark the current task as due in N weeks
    <LocalLeader>tm ...... Mark the current task as due in N months
    <LocalLeader>ty ...... Set the current task's priority
    <LocalLeader>ta ...... Archive completed tasks
    <LocalLeader>tb ...... View, filter tasks in the current buffer
    <LocalLeader>t* ...... View tasks in the current buffer that match the word 
                           under the cursor
    <LocalLeader>tn ...... Add a note (the filename uses the first @list tag)
    <LocalLeader>ti ...... Add a hopefully unique ID (an Adler32 hash)
    <LocalLeader>tD ...... Add a dependency

If filetype is ttodo, the following buffer-local commands are enabled:

    |:Ttodoarchive| ...... Archive completed tasks in the current buffer
    |:Ttodobuffer| ....... Show tasks in the current buffer only
    |:Ttodonote| ......... Add a new note to the task at the cursor
    |:Ttodosort| ......... Sort the tasks in the current buffer

As a ftplugin, ttodo supports the following syntax/extensions to todo.txt (see 
also https://github.com/ginatrapani/todo.txt-cli/wiki/The-Todo.txt-Format):

    (A) DATE TASK ........ A priority as upper case letter (at the beginning of the 
                           line)
    DATE TASK ............ An open task
    x DATE DATE TASK ..... A completed task (with completion date)
      indented tasks ..... A indented task is a subtask of the parent task; unless 
                           `has_subtasks` is true, |:Ttodo| will only show tasks 
                           with no open subtasks; this is similar to how the 
                           outline addon handles subtasks (see also 
                           https://github.com/samuelsnyder/outline-todo.txt)

                                                    *ttodo-tags*
A TASK may contain the following tags:
                                                    *ttodo-@next*
    @list ............ a "list" tag
                       NOTE: The is a special list `@next` that marks important 
                       task that should really be tackled next.
    +keyword ......... a "keyword" tag
    h:1 .............. hidden task
    due:YYYY-MM-DD ... due dates
                       NOTE: If a task is member of the `@next` list, filters 
                       by due dates will be ignored
    rec:+Nx .......... When marking a task a "done", add a new task with a due 
                       date in N d(ays), w(eeks), m(onths), y(ears); with the 
                       leading '+' use the original due date; else use the 
                       completion date; this is similar to how the Simpletask 
                       Android app handles `rec` tags
    t:YYYY-MM-DD ..... Hide the tasks until the given date
    t:-Nd ............ Hide the tasks until N days before the due date
    id:ID ............ Define a tasks ID string (an ID should consist 
                       of alphanumeric characters only)
    dep:IDs .......... Depends on task with ID (if the other task is not 
                       completed yet, mark the current task as pending);
                       IDs is a comma-separated list of IDs
    parent:ID ........ In outlines: the current task is the child of 
                       task with ID
                                                    *ttodo-file-options*
    $TTODO$ OPTION:VALUE .. If a line matches `$TTODO$` it is assumed to 
                       contain a file-local option. Search the help file for 
                       `OPTION:` to see which options are available. Users will 
                       typically want to hide such lines using `h:1`

If you set |g:ttodo_enable_ftdetect| to 0, you can use the |:Ttodo| command in 
conjunction with other syntax files/ftplugins such as:

    - https://github.com/freitass/todo.txt-vim
        - todo-txt.vim : Vim plugin for Todo.txt 
          https://github.com/dbeniamine/todo.txt-vim or
          http://www.vim.org/scripts/script.php?script_id=5134
    - https://github.com/mivok/vimtodo or
      http://www.vim.org/scripts/script.php?script_id=3264
    - https://github.com/davidoc/todo.txt-vim
        - My fork: https://github.com/tomtom/todo.txt-vim-1
    - https://github.com/dsiroky/vim-todotxt
    - ...

Related work:
    - https://github.com/elentok/todo.vim


-----------------------------------------------------------------------
Install~

To install the vimball, edit the vba file and type: >

    :so %

See :help vimball for details.

To install from github, please use
    1. git + a plugin loader like enable_vim, pathogen, vim-unbundle etc.
    2. a plugin manager like VAM, Vundle, NeoBundle, vim-plug etc.

The tlib_vim plugin is required:
https://github.com/tomtom/tlib_vim

Optional enhancement:
- https://github.com/tomtom/autolinker_vim for hyperlinking

Also available via git: http://github.com/tomtom/ttodo_vim


Setup~

Please set |g:ttodo#dirs| in |vimrc| before using |:Ttodo|.


========================================================================
Contents~

        g:ttodo_nmap ...................................................... |g:ttodo_nmap|
        g:ttodo_nmap_important ............................................ |g:ttodo_nmap_important|
        g:ttodo_localmap .................................................. |g:ttodo_localmap|
        g:ttodo_enable_ftdetect ........................................... |g:ttodo_enable_ftdetect|
        :Ttodo ............................................................ |:Ttodo|
        :Ttodonew ......................................................... |:Ttodonew|
        :Ttodoinbox ....................................................... |:Ttodoinbox|
        :Ttodonext ........................................................ |:Ttodonext|
        :Ttodogrep ........................................................ |:Ttodogrep|
        g:ttodo#fileargs .................................................. |g:ttodo#fileargs|
        g:ttodo#file_pattern .............................................. |g:ttodo#file_pattern|
        g:ttodo#force_filetype ............................................ |g:ttodo#force_filetype|
        g:ttodo#file_include_rx ........................................... |g:ttodo#file_include_rx|
        g:ttodo#file_exclude_rx ........................................... |g:ttodo#file_exclude_rx|
        g:ttodo#task_include_rx ........................................... |g:ttodo#task_include_rx|
        g:ttodo#task_exclude_rx ........................................... |g:ttodo#task_exclude_rx|
        g:ttodo#viewer .................................................... |g:ttodo#viewer|
        g:ttodo#sort ...................................................... |g:ttodo#sort|
        g:ttodo#default_t ................................................. |g:ttodo#default_t|
        g:ttodo#new_task .................................................. |g:ttodo#new_task|
        g:ttodo#inbox ..................................................... |g:ttodo#inbox|
        g:ttodo#qfl_short_filename ........................................ |g:ttodo#qfl_short_filename|
        ttodo#SortBuffer .................................................. |ttodo#SortBuffer()|
        g:ttodo#ftplugin#note_prefix ...................................... |g:ttodo#ftplugin#note_prefix|
        g:ttodo#ftplugin#edit_note ........................................ |g:ttodo#ftplugin#edit_note|
        g:ttodo#ftplugin#add_at_eof ....................................... |g:ttodo#ftplugin#add_at_eof|
        g:ttodo#ftplugin#rec_copy ......................................... |g:ttodo#ftplugin#rec_copy|
        g:ttodo#ftplugin#new_subtask_copy_pri ............................. |g:ttodo#ftplugin#new_subtask_copy_pri|
        g:ttodo#ftplugin#new_subtask_place_cursor_before_copied_attribs ... |g:ttodo#ftplugin#new_subtask_place_cursor_before_copied_attribs|
        g:ttodo#ftplugin#new_with_creation_date ........................... |g:ttodo#ftplugin#new_with_creation_date|
        g:ttodo#ftplugin#new_default_priority ............................. |g:ttodo#ftplugin#new_default_priority|
        ttodo#ftplugin#New ................................................ |ttodo#ftplugin#New()|
        :Ttodosort ........................................................ |:Ttodosort|
        :Ttodoarchive ..................................................... |:Ttodoarchive|
        :Ttodobuffer ...................................................... |:Ttodobuffer|
        :Ttodonote ........................................................ |:Ttodonote|


------------------------------------------------------------------------
                                                    *plugin/ttodo.vim*
                                                    *g:ttodo_nmap*
g:ttodo_nmap                   (default: '<Leader>1')
    Call |:Ttodo|.

                                                    *g:ttodo_nmap_important*
g:ttodo_nmap_important         (default: '<Leader>!')
    Call |:Ttodonext|.

                                                    *g:ttodo_localmap*
g:ttodo_localmap               (default: '<Localleader>1')
    Call |:Ttodo| with `%:p:h/TODO.TXT`.

                                                    *g:ttodo_enable_ftdetect*
g:ttodo_enable_ftdetect        (default: 1)
    Set this variable to 1 in |vimrc| in order to enable the ttodo 
    filetype for todo.txt files.

                                                    *:Ttodo*
:Ttodo[!] [ARGS] [INITIAL FILTER]

    ARGS is an argument list. The following arguments are supported:
      --pref=PREF .... PREF is the name of a preferences set in 
                       |g:ttodo#prefs| (default: "default")
      --due=DATE ..... show only tasks with due dates >= DATE. DATE can be
                       - a DATE in the form YYYY-MM-DD or
                       - a number of days or
                       - a number of weeks as in "4w"
                       (default: |g:ttodo#default_due|)
      --undated ...... Show tasks with no due dates when using the due 
                       argument
      --done ......... Show completed tasks
      --pending ...... Show tasks with open dependencies
      --hidden ....... Show hidden tasks, i.e. tasks with a "h:1" tag or 
                       tasks matching |g:ttodo#task_hide_rx|
      --bufnr=BUFNR .. A comma-separated list of buffer numbers (must be 
                       numbers)
      --bufname=EXPR . A buffer name expression (see |bufname()|)
      --files=FILE1,FILE2... .. A comma-separated list of todo.txt files
      --path=PATH .... Search files in this path (default: use 
                       |g:ttodo#dirs|)
      --pattern=PAT .. Search files matching this pattern (default: 
                       |g:ttodo#file_pattern|)
      --encoding=ENC . Encoding of the task files (default: &enc)
      --sort=FIELDS .. default: |g:ttodo#sort|
      --has_subtasks . Show tasks with open subtasks (i.e. indented tasks 
                       below the parent task)
      --pri=PRI ..................... Show tasks with a priority matching 
                                      [PRI] (see |/[]|)
      --ignore_pri=PRI .............. Ignore tasks with a priority 
                                      matching [PRI] (see |/[]|)
      --has_lists=LIST1,.. .......... Show tasks with matching lists
      --ignore_lists=LIST1,.. ....... Ignore tasks with matching lista
      --has_tags=TAG1,.. ............ Show tasks with matching taga
      --ignore_tags=TAG1,.. ......... Ignore tasks with matching tags
      -A=RX, --file_include_rx=RX ... Default: |g:ttodo#file_include_rx|
      -R=RX, --file_exclude_rx=RX ... Default: |g:ttodo#file_exclude_rx|
      -i=RX, --task_include_rx=RX ... Default: |g:ttodo#task_include_rx|
      -x=RX, --task_exclude_rx=RX ... Default: |g:ttodo#task_exclude_rx|

    When the [!] is included show only important tasks.

    INITIAL FILTER is a |regexp| for filtering the task list. The 
    interpretation of INITIAL FILTER depends on the value of 
    |g:tlib#input#filter_mode|. The format of INITIAL FILTER depends on 
    the value of |g:ttodo#viewer|.

                                                    *:Ttodonew*
:Ttodonew
    Add a new task.

                                                    *:Ttodoinbox*
:Ttodoinbox
    Show newly (maybe semi-automatically) added tasks, i.e. tasks that are in the @Inbox list.

                                                    *:Ttodonext*
:Ttodonext
    Show tasks that should be done next, i.e. tasks that are in the @next 
    list.

                                                    *:Ttodogrep*
:Ttodogrep
    Scan todo files and notes for some text -- see |:Trag| for details.

    NOTE: This command requires the trag VIM plugin to be installed.


------------------------------------------------------------------------
                                                    *autoload/ttodo.vim*
                                                    *g:ttodo#fileargs*
g:ttodo#fileargs               (default: {})
    A dictionary of {filename |regexp|: {additional args}} -- see 
    |g:ttodo#dirs| for details on supported arguments.

                                                    *g:ttodo#file_pattern*
g:ttodo#file_pattern           (default: ['*todo.txt', '*TODO.TXT'])
    A glob pattern matching todo.txt files.

                                                    *g:ttodo#force_filetype*
g:ttodo#force_filetype         (default: 1)
    By default, |ttodo#FiletypeDetect()| uses |:setf| to set the 
    filetype. This only works, if there isn't already a filetype 
    assigned to the buffer.

    If true, ttodo will make sure the filetype is `ttodo` by using 
    |:set| to set 'filetype'.

                                                    *g:ttodo#file_include_rx*
g:ttodo#file_include_rx        (default: '')
    Consider only files matching this |regexp|.

                                                    *g:ttodo#file_exclude_rx*
g:ttodo#file_exclude_rx        (default: '[\/]done\.txt$')
    Ignore files matching this |regexp|.

                                                    *g:ttodo#task_include_rx*
g:ttodo#task_include_rx        (default: '')
    Include only tasks matching this |regexp| in the list.

                                                    *g:ttodo#task_exclude_rx*
g:ttodo#task_exclude_rx        (default: '')
    Exclude tasks matching this |regexp| from the list.

                                                    *g:ttodo#viewer*
g:ttodo#viewer                 (default: 'tlib')
    Supported values:
      tlib ...... Use the tlib_vim plugin; the syntax of |:Ttodo|'s 
                  initial filter depends on the value of 
                  |g:tlib#input#filter_mode|
      :COMMAND .. E.g. `:cwindow` or `:CtrlPQuickfix`. In this case 
                  initial filter is a standard |regexp|.

                                                    *g:ttodo#sort*
g:ttodo#sort                   (default: '-next,-overdue,pri,due,done,lists,tags,idx')
    A comma-separated list of fields that determine the sort order for 
    |:Ttodo| and |:Ttodosort|.

    A "-" as prefix reverses the sort order.

                                                    *g:ttodo#default_t*
g:ttodo#default_t              (default: '-31d')
    If a task has no threshold date defined, assign this default threshold date.

                                                    *g:ttodo#new_task*
g:ttodo#new_task               (default: {'lists': ['Inbox'], 'pri': 'C'})
    Defintion for tasks added via |:Ttodonew|.

                                                    *g:ttodo#inbox*
g:ttodo#inbox                  (default: 'todo.txt')
    A file basename (no directory).

    Tasks added by |:Ttodonew| will be added to this file in the 
    default (i.e. the first) directory in |g:ttodo#dirs|.

                                                    *g:ttodo#qfl_short_filename*
g:ttodo#qfl_short_filename     (default: 'basename')
    Possible values: "basename", "shorten", ""

                                                    *ttodo#SortBuffer()*
ttodo#SortBuffer(cmdargs)
    If called with --sortseps=tags,lists, an empty line is inserted after 
    each main (i.e. first) list or tag.

    Sorting doesn't work for outlines, i.e. tasks with subtasks.


------------------------------------------------------------------------
                                                    *autoload/ttodo/ftplugin.vim*
                                                    *g:ttodo#ftplugin#note_prefix*
g:ttodo#ftplugin#note_prefix   (default: 'root://')
    OPTION: note_prefix:PREFIX

    Prefix for references to notes.

    Possible (potentially useful) values:
      - todo:// (opens the file in SimpleTask)
      - root:// (SimpleTask: path relative to todo.txt file)
      - file:// (less useful since it would require an absolute path)

                                                    *g:ttodo#ftplugin#edit_note*
g:ttodo#ftplugin#edit_note     (default: '')
    If non-empty, edit a newly added reference to a note right away.

    Possible (potentially useful) values:
      - split
      - hide edit
      - tabedit

                                                    *g:ttodo#ftplugin#add_at_eof*
g:ttodo#ftplugin#add_at_eof    (default: 1)
    OPTION: add_at_eof:VALUE

    If true, the <cr> or <c-cr> map will make ttodo add a new task at 
    the end of the file. Otherwise the task will be added below the 
    current line.
    Subtasks will always be added below the current line.

                                                    *g:ttodo#ftplugin#rec_copy*
g:ttodo#ftplugin#rec_copy      (default: 1)
    OPTION: rec_copy:VALUE

    If true, marking a recurring task as "done" will mark the old task 
    as completed and will then create a new updated task.

                                                    *g:ttodo#ftplugin#new_subtask_copy_pri*
g:ttodo#ftplugin#new_subtask_copy_pri (default: 0)
    OPTION: new_subtask_copy_pri:VALUE

    If true, copy the parent task's priority when creating subtasks.

                                                    *g:ttodo#ftplugin#new_subtask_place_cursor_before_copied_attribs*
g:ttodo#ftplugin#new_subtask_place_cursor_before_copied_attribs (default: 1)
    OPTION: new_subtask_place_cursor_before_copied_attribs:VALUE

                                                    *g:ttodo#ftplugin#new_with_creation_date*
g:ttodo#ftplugin#new_with_creation_date (default: 1)
    OPTION: new_with_creation_date:VALUE

                                                    *g:ttodo#ftplugin#new_default_priority*
g:ttodo#ftplugin#new_default_priority (default: 'C')
    OPTION: new_default_priority:VALUE

                                                    *ttodo#ftplugin#New()*
ttodo#ftplugin#New(move, copytags, mode, ...)
    Values for copytags:
      1 ... Copy tags
      2 ... Copy tags & mark as dependency


------------------------------------------------------------------------
                                                    *ftplugin/ttodo.vim*
                                                    *:Ttodosort*
:Ttodosort
    Sort the tasks in the current buffer.

    Sorting task outlines (i.e. subtasks) is not supported.

                                                    *:Ttodoarchive*
:Ttodoarchive
    Archive completed tasks in the current buffer.

                                                    *:Ttodobuffer*
:Ttodobuffer
    View the tasks in the current buffer.

                                                    *:Ttodonote*
:Ttodonote
    Add a new task to the task at the cursor.



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
